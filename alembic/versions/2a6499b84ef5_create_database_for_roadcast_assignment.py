"""Create database for roadcast assignment

Revision ID: 2a6499b84ef5
Revises: 
Create Date: 2024-12-25 21:30:45.571854

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '2a6499b84ef5'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('shifts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('day', sa.Enum('MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY', name='weekday'), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('email_id', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.Text(), nullable=False),
    sa.Column('role', sa.Enum('MANAGER', 'STAFF', 'ADMIN', name='role'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email_id')
    )
    op.create_table('rosters',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('manager_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['manager_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('roster_members',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('roster_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['roster_id'], ['rosters.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('roster_member_off_days',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('roster_member_id', sa.Integer(), nullable=False),
    sa.Column('off_day', sa.Enum('MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY', name='weekday'), nullable=False),
    sa.ForeignKeyConstraint(['roster_member_id'], ['roster_members.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('roster_shifts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('roster_member_id', sa.Integer(), nullable=False),
    sa.Column('shift_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['roster_member_id'], ['roster_members.id'], ),
    sa.ForeignKeyConstraint(['shift_id'], ['shifts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('roster_member_id', 'shift_id', name='unique_roster_shift')
    )
    op.create_table('attendance',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('roster_shift_id', sa.Integer(), nullable=False),
    sa.Column('attendance_date', sa.Date(), nullable=False),
    sa.Column('checkin_time', sa.TIMESTAMP(), nullable=True),
    sa.Column('checkout_time', sa.TIMESTAMP(), nullable=True),
    sa.Column('image_path', sa.Text(), nullable=False),
    sa.Column('status', sa.Enum('PRESENT', 'ABSENT', name='attendancestatus'), nullable=True),
    sa.ForeignKeyConstraint(['roster_shift_id'], ['roster_shifts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('roster_shift_id', 'attendance_date', name='unique_roster_shift_attendance')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('attendance')
    op.drop_table('roster_shifts')
    op.drop_table('roster_member_off_days')
    op.drop_table('roster_members')
    op.drop_table('rosters')
    op.drop_table('users')
    op.drop_table('shifts')
    op.execute('DROP type weekday')
    op.execute('DROP type attendancestatus')
    op.execute('DROP type role')
    # ### end Alembic commands ###
